02_Mybatis.txt


# Mybatis

	- 쿼리문만 적으면 알아서 DB에서 데이터를 꺼내오는 프레임워크
	- 거의 모든 jdbc 관련 코드를 자동으로 생성해준다
	- 개발자는 사용할 쿼리문과 종류만 선택하면 된다
	
	
# 필요한 의존성들

	- mybatis
	- mybatis-spring
	- spring-jdbc 


# 적용 순서

  1. DBCP로 DataSource 객체를 생성한다
  
  2. 생성한 DataSource 객체로 SqlSessionFactoryBean 객체를 생성한다
  	 (컨텍스트상에 sqlSessionFactory가 있으면 mybatis가 알아서 필요할 때 가져다 사용한다)
  
  	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="hikariDataSource" />
	</bean>

  3. mybatis-spring:scan 기능을 통해 패키지의 위치를 지정한다
  
  	<mybatis-spring:scan base-package="com.ezen.springdatabase.mapper"/> 

	
# Mapper

	- Mybatis에 Mapper 인터페이스를 등록하면 해당 Mapper의 정보를 통해 자동으로 메서드를 생성해준다
	  (리턴 타입, 쿼리문, 쿼리문 타입)
	  
	- 어노테이션 방식의 Mapper와 XML 방식의 Mapper가 있다

	
# 어노테이션 방식 Mapper

	@Select(query)
	@Insert(query)  
	@Delete(query)
	@Update(query)
	
	- @Select로 조회하는 데이터가 여러 행인 경우 List타입으로 리턴해준다
	- @Select로 조회하는 데이터가 한 행인 경우 해당 DTO타입으로 리턴해준다
	- 쿼리문에 파라미터가 필요한 경우 #{name}로 사용하고 @Param("name")으로 지정해준다
	- @Insert, @Update, @Delete로 업데이트 된 행을 리턴하므로 정수타입으로 리턴해준다
	- @Insert, @Update시에 파라미터를 자바빈 데이터 클래스 형식으로 넘기면 파라미터에 #{property}를 사용할 수 있다
		
	
	
	
	
