04_Ajax.txt


# AJAX (Async JavaScript and XML)

	- 비동기 자바스크립트와 XML (요즘엔 JSON을 많이 사용)
	- 해당 웹페이지를 새로고침하지 않고 요청을 보내 응답 받은 내용을 현재 페이지에 반영할 수 있는 문법
	- 주로 @RestController에 요청을 보내 데이터만 가져와서 활용하는 방식으로 사용한다
	- 서버로부터 데이터를 응답받을 때마다 이벤트가 발생하고 해당 이벤트를 처리하여 사용한다
	

# XMLHttpRequest

	- 자바스크립트의 비동기 통신 요청 객체
	- 요청을 보내도 페이지가 새로고침 되지 않는다
	- 인스턴스를 생성한 후 해당 인스턴스에 여러 설정을 한 뒤 요청을 보낸다
	
	
# xhttp.open(method, url)

	- 첫 번째 파라미터에는 요청 방식을 설정한다 (GET, POST 외의 PUT, DELETE 등의 메서드는 xhttp로만 보낼 수 있다)
	- 두 번째 파라미터에는 요청 URL을 설정한다
	
	 
# xhttp의 onreadystatechange 이벤트

	- xhttp 내부의 readyState 값이 변할때마다 호출되는 이벤트
	- readyState 1 : open()이 성공했을 때 (send하기 전)
	- readyState 2 : 요청에 대한 응답이 도착했을 때
	- readyState 3 : 응답에 대한 처리를 시작했을 때
	- readyState 4 : 응답에 대한 처리가 모두 끝났을 때
	

# xhttp.send(body)

	- GET 방식을 제외한 나머지 방식은 send() 시에 데이터를 실어보낼 수 있다
	- 주로 JSON 형식 문자열을 생성하여 보낸다 (JSON.stringify(obj) 메서드를 사용) 
	- JSON 형식 데이터를 보낼 때는 보내는 데이터의 타입이 'application/json'임을 알려줘야 한다
	  xhttp.setRequestHeader('content-type', 'application/json')
	  
	  
# xhttp.status

	- 서버에서 응답한 상태코드에 따른 로직을 작성할 때 사용한다
	- 서버에서는 ResponseEntity로 직접 상태코드를 설정하여 응답을 보낼 수 있다
	
	if(xhttp.readyState == 4 && xhttp.status == 200) {
		// Ajax 응답의 처리가 끝났고, 상태 코드가 200(ok)일 때에 대한 처리
	} else if(xhttp.readyState == 4 && xhttp.status == 400) {
		// Ajax 응답의 처리가 끝났고, 상태 코드가 400(bad request)일 때에 대한 처리
	}
	  
	  
	  
	  
	  
	  
	  
	  
	    